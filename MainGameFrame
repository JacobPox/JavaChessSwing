package projectoverlord.ProjectOverlord;

//more imports than God intended, probably punishable by death in Leviticus
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
public class MainGameFrame extends JPanel
{
    //The frame
    private JFrame frame = new JFrame("Chess");
    
    public MainGameFrame()
    {
        //doing the stuff that needs done for the frame and adding the panel
        super();
        frame.add(this);
        frame.setSize(500, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        
    }
    
    public void paintComponent(Graphics g)
    {
        //drawing board and pieces on top of the board
        super.paintComponent(g);
        drawBoard(g);
        drawPieces(g);
        
    }
    
    public void drawBoard(Graphics g)
    {
        //width and height of the frame
        int width = getWidth();
        int height = getHeight();
        int tileSideLength = width/8;
        boolean colorFlag = true;
        
        //top left corner locations of tiles being printed
        int x = 0;
        int y = 0;
        
        /* STRANGE ISSUE:
        drawing the tiles, some weird issues come up where getWidth()
        and getHeight() where theyre different from the set dimensions
        even when the window hasnt changed size
        */
        
        //moving down the eight rows
        for(int j = 0; j < 8; j++)
        {
            //starting at the left
            x=0;
            
            //switching the tileColor
            colorFlag = !colorFlag;
            
            //printing one element of each column left to right
            for(int i = 0; i < 8; i++)
            {
                //setting tile as white or black
                if(colorFlag)
                    g.setColor(Color.WHITE);
                else
                    g.setColor(Color.GRAY);
                
                g.fillRect(x, y, width/8, height/8);
                colorFlag = !colorFlag;
                
                //moving the rect's top left to the right by the length of a tile
                x += tileSideLength;
            }
            //moving the top left pixel of the next tile down by the length of a tile
            y += tileSideLength;
        }
    }
    
    public void drawPieces(Graphics g)
    {
        int width = getWidth();
        int height = getHeight();
        
        /*
        Notes for Jacob:
        
        I downloaded some chess icons I liked from https://icons8.com/icons/set/chess
        and use them here. I just put them all into a folder inside my pictures.
        I set the file path as a string so just make sure you switch it to the 
        path to your icon folder but other than that ass long as you name the
        images "InsertpiecetypeIcon.Png" then the rest of it should work. Maybe
        I should upload the image files to github so we have the same ones. Also
        theyre all black right now so maybe we could make the while tiles some 
        other color and then just invert the black pieces to white so that they
        sit on the tiles visibly
        */
        String chessIconFilePath = "C:\\Users\\ncala\\Pictures\\ChessIcons\\";
        
        int tileSideLength = width/8;
        
        //loading pawn image
        BufferedImage pawnIcon = null;
        try
        {
            pawnIcon = ImageIO.read(new File(chessIconFilePath + "PawnIcon.Png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainGameFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Didnt get the file ya bum");
        }
        
        //setting the x-position so that the icon is in the middle of the tile 
        int x = tileSideLength/4;
        for(int i = 0; i < 8; i ++)
        {
            g.drawImage(pawnIcon, x, (tileSideLength/4)*5, this);
            x += tileSideLength;
        }
        
        x=tileSideLength/4;
        for(int i = 0; i < 8; i ++)
        {
            g.drawImage(pawnIcon, x, (tileSideLength/4)*25, this);
            x += tileSideLength;
        }
        
        //loading rook images
        BufferedImage rookIcon = null;
        try
        {
            rookIcon = ImageIO.read(new File(chessIconFilePath + "RookIcon.Png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainGameFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Didnt get the file ya bum");
        }
        
        g.drawImage(rookIcon, tileSideLength/4, tileSideLength/4, this);
        g.drawImage(rookIcon, tileSideLength/4, (tileSideLength/4) + 7 * tileSideLength, this);
        g.drawImage(rookIcon, (tileSideLength/4) + 7 * tileSideLength,  tileSideLength/4, this);
        g.drawImage(rookIcon, (tileSideLength/4) + 7 * tileSideLength,  (tileSideLength/4) + 7 * tileSideLength, this);
        
        //loading knight images
        BufferedImage knightIcon = null;
        try
        {
            knightIcon = ImageIO.read(new File(chessIconFilePath + "KnightIcon.Png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainGameFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Didnt get the file ya bum");
        }
        
        g.drawImage(knightIcon, tileSideLength/4 + tileSideLength, tileSideLength/4, this);
        g.drawImage(knightIcon, tileSideLength/4 + tileSideLength, (tileSideLength/4) + 7 * tileSideLength, this);
        g.drawImage(knightIcon, (tileSideLength/4) + 7 * tileSideLength - tileSideLength,  tileSideLength/4, this);
        g.drawImage(knightIcon, (tileSideLength/4) + 7 * tileSideLength - tileSideLength,  (tileSideLength/4) + 7 * tileSideLength, this);
        
        //loading bishop images
        BufferedImage bishopIcon = null;
        try
        {
            bishopIcon = ImageIO.read(new File(chessIconFilePath + "BishopIcon.Png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainGameFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Didnt get the file ya bum");
        }
        
        g.drawImage(bishopIcon, tileSideLength/4 + 2*tileSideLength, tileSideLength/4, this);
        g.drawImage(bishopIcon, tileSideLength/4 + 2*tileSideLength, (tileSideLength/4) + 7 * tileSideLength, this);
        g.drawImage(bishopIcon, (tileSideLength/4) + 7 * tileSideLength - 2*tileSideLength,  tileSideLength/4, this);
        g.drawImage(bishopIcon, (tileSideLength/4) + 7 * tileSideLength - 2*tileSideLength,  (tileSideLength/4) + 7 * tileSideLength, this);
        //loading king images
        BufferedImage kingIcon = null;
        try
        {
            kingIcon = ImageIO.read(new File(chessIconFilePath + "KingIcon.Png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainGameFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Didnt get the file ya bum");
        }
        
        g.drawImage(kingIcon, tileSideLength/4 + 4*tileSideLength, tileSideLength/4, this);
        g.drawImage(kingIcon, tileSideLength/4 + 4*tileSideLength, (tileSideLength/4) + 7 * tileSideLength, this);
        
        //loading quen images
        BufferedImage queenIcon = null;
        try
        {
            queenIcon = ImageIO.read(new File(chessIconFilePath + "QueenIcon.Png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(MainGameFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Didnt get the file ya bum");
        }
        
        g.drawImage(queenIcon, tileSideLength/4 + 3*tileSideLength, tileSideLength/4, this);
        g.drawImage(queenIcon, tileSideLength/4 + 3*tileSideLength, (tileSideLength/4) + 7 * tileSideLength, this);
    }
    
    //TODO METHODS
    
    /*
    have a mouseDragged listener that lets the user drag the piece from its tile
    and then change the images (x, y) to the mose (x, y) then when the mouse is
    unclicked have it snap to the tile its on.
    
    Then have a button the user clicks that validates the move or sets it back
    to the tile it was on and loops their turn. 
    */
    
    
    //RANDOM THINGS I PROBABLY ALREADY SAID
    /*
    So we should have a message sidebar that has some stuff on it like which player is up
    and how many pieces they've taken, plus the drop down menu of game types that you wanted
    to do. Also we need to find some way to deal with scalability (either only changes
    the same amount in both directions or just make it unscalable). If we make the window a fixed
    size we could make the tileSideLength (pretty sure thats the name) to a fixed size which would
    eliminate the awkward getWidth methods. If we make it scalable lets just make sure to also scale the
    Icons as well. 
    */
    
    
}
